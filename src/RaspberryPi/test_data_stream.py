import datetime
import paho.mqtt.client as mqtt
import random
import string


now = datetime.datetime.now()

# Output path for storing the log file
outpath='./'

# Log file name
templog = 'tempdata_stream.log'

# MQTT server name (on port 1883)
serverIP = "192.168.1.249"

# Number of test points to send to server
npoints = 10


############################################################
#
# Set up the MQTT publisher.
#
############################################################

# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))

    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    # client.subscribe("$SYS/#")

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    print(msg.topic+" "+str(msg.payload))

def on_publish(mqttc, obj, mid):
    print("mid: "+str(mid))
    pass

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.on_publish = on_publish

client.connect(serverIP, 1883, 60)


for i in range(npoints):
    day = ''
    serverip = 'serverip'
    clientip = ''.join(random.choice(string.ascii_uppercase) for _ in range(5))
    clientport = random.randint(10000,99999)
    clientlat = random.uniform(-90,90)
    clientlon = random.uniform(-180,180)
    countrtt = random.randint(10,1000)
    sumrtt = random.randint(1000,100000)
    avgrtt = float(sumrtt)/countrtt
    if random.random() > 0.95:
        avgrtt *= 10
		
	# NOTE: this clientsub has the possibility of 2-digit client subs, outside the range generated by the "test_data_generator.py"
    clientsub = ''.join(random.choice(string.ascii_uppercase) for _ in range(random.randint(1,2)))

    #
    # Get the last line in the log file and increase based on that date
    # 
    lastline = subprocess.check_output(['tail', '-1', outpath+templog])
    start = iso8601.parse_date(lastline.split(',')[0])
        
    dt = start + datetime.timedelta(seconds=random.randint(0, 10800))
    day=datetime.datetime.isoformat(dt)


    output = day + "," + serverip  
    output += "," + clientip+"," + str(clientport)
    output += "," + "{:6f}".format(clientlat) +"," + "{:6f}".format(clientlon)
    output += "," + str(countrtt) + "," + str(sumrtt) + "," + "{:6f}".format(avgrtt) + ',' + clientsub
    print output

    
	# append the data to the file
    with open(outpath + templog , 'a') as logfile:
        output += "\n"
        logfile.writelines(output)
    
    #Send the string to the MQTT messenger
    (rc, mid) = client.publish("ndt", output, qos=0)
    
    time.sleep(1)
